---
import Layout from '../layouts/Layout.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import { Image } from 'astro:assets';

const courtainImageModules = import.meta.glob<{ default: ImageMetadata }>('../assets/products/courtain/*.png', { eager: true });
const blindImageModules = import.meta.glob<{ default: ImageMetadata }>('../assets/products/blind/*.png', { eager: true });
const courtainPdfModules = import.meta.glob<{ default: string }>('../assets/products/courtain/*.pdf', { eager: true });

const courtainProducts = Object.keys(courtainImageModules)
  .map(imagePath => {
    const fileName = imagePath.split('/').pop()?.replace('.png', '');
    if (!fileName) {
      return null;
    }

    const pdfPath = `../assets/products/courtain/${fileName}.pdf`;
    const pdfModule = courtainPdfModules[pdfPath];
    const imageModule = courtainImageModules[imagePath];

    if (!imageModule) {
      return null;
    }

    return {
      name: fileName,
      image: imageModule.default,
      pdf: pdfModule ? pdfModule.default : null,
    };
  })
  .filter((p): p is NonNullable<typeof p> => p !== null);

const blindProducts = Object.keys(blindImageModules)
    .map(imagePath => {
        const fileName = imagePath.split('/').pop()?.replace('.png', '');
        if (!fileName) {
            return null;
        }
        const imageModule = blindImageModules[imagePath];

        if (!imageModule) {
            return null;
        }

        return {
            name: fileName,
            image: imageModule.default,
            pdf: null,
        };
    })
    .filter((p): p is NonNullable<typeof p> => p !== null);


const products = [...courtainProducts, ...blindProducts].filter(product => product.image);

---

<Layout>
  <Header />
  <main class="container mx-auto px-6 py-8">
    <h1 class="text-4xl font-bold text-center mt-15 text-olive-dark mb-12">Persianas y Cortinas</h1>
    <h2 class="text-2xl font-bold text-center mt-3 text-olive-dark mb-12">Persianas</h2>
    <div class="flex flex-wrap justify-center gap-8">
      {blindProducts.map(product => (
        <div class="bg-white rounded-lg shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300 cursor-pointer w-full max-w-sm" data-pdf={product.pdf}>
          <Image src={product.image} alt={product.name} class="w-full h-80 object-cover"/>
          <div class="p-4">
            <h3 class="text-lg font-bold text-olive-dark text-center">{product.name}</h3>
          </div>
        </div>
      ))}
    </div>
    <h2 class="text-2xl font-bold text-center mt-3 text-olive-dark mb-12">Cortinas</h2>
    <div class="flex flex-wrap justify-center gap-8">
      {courtainProducts.map(product => (
        <div class="bg-white rounded-lg shadow-lg overflow-hidden transform hover:-translate-y-2 transition-transform duration-300 cursor-pointer w-full max-w-sm" data-pdf={product.pdf}>
          <Image src={product.image} alt={product.name} class="w-full h-80 object-cover"/>
          <div class="p-4">
            <h3 class="text-lg font-bold text-olive-dark text-center">{product.name}</h3>
          </div>
        </div>
      ))}
    </div>
  </main>
  <Footer />

  <div id="pdf-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden items-center justify-center z-50">
    <div class="bg-white p-4 rounded-lg shadow-lg w-11/12 h-5/6 relative">
      <button id="close-modal" class="absolute top-2 right-2 text-black font-bold text-2xl">&times;</button>
      <iframe id="pdf-viewer" class="w-full h-full" frameborder="0"></iframe>
    </div>
  </div>
</Layout>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const modal = document.getElementById('pdf-modal');
    const pdfViewer = document.getElementById('pdf-viewer');
    const closeModal = document.getElementById('close-modal');
    const productItems = document.querySelectorAll('[data-pdf]');

    productItems.forEach(item => {
      item.addEventListener('click', () => {
        const pdfPath = item.getAttribute('data-pdf');
        if (pdfPath && pdfPath !== 'null' && modal && pdfViewer) {
          pdfViewer.setAttribute('src', pdfPath);
          modal.classList.remove('hidden');
          modal.classList.add('flex');
        }
      });
    });

    if(closeModal && modal){
        closeModal.addEventListener('click', () => {
            modal.classList.add('hidden');
            modal.classList.remove('flex');
            if(pdfViewer){
                pdfViewer.setAttribute('src', '');
            }
        });
    }

    if(modal){
        modal.addEventListener('click', (e) => {
            if (e.target === modal) {
                modal.classList.add('hidden');
                modal.classList.remove('flex');
                if(pdfViewer){
                    pdfViewer.setAttribute('src', '');
                }
            }
        });
    }
  });
</script>